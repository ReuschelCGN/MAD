syntax = "proto3";
import "shared/Worker.proto";

package mapadroid.mapping_manager;

service MappingManager {
  rpc GetAllowedAuthenticationCredentials(GetAllowedAuthenticationCredentialsRequest) returns (GetAllowedAuthenticationCredentialsResponse);
  rpc GetAllLoadedOrigins(GetAllLoadedOriginsRequest) returns (GetAllLoadedOriginsResponse);
  rpc GetSafeItemsNotToDelete(GetSafeItemsNotToDeleteRequest) returns (GetSafeItemsNotToDeleteResponse);
  rpc IsRoutemanagerOfOriginLevelmode(IsRoutemanagerOfOriginLevelmodeRequest) returns (IsRoutemanagerOfOriginLevelmodeResponse);
  rpc GetQuestLayerToScanOfOrigin(GetQuestLayerToScanOfOriginRequest) returns (GetQuestLayerToScanOfOriginResponse);
}

message GetQuestLayerToScanOfOriginRequest {
  mapadroid.shared.Worker worker = 1;
}

message GetQuestLayerToScanOfOriginResponse {
  optional int32 layer = 1;
}

message IsRoutemanagerOfOriginLevelmodeRequest {
  mapadroid.shared.Worker worker = 1;
}

message IsRoutemanagerOfOriginLevelmodeResponse {
  bool is_levelmode = 1;
}


message GetSafeItemsNotToDeleteRequest {
  mapadroid.shared.Worker worker = 1;
}

message GetSafeItemsNotToDeleteResponse {
  repeated int32 item_ids = 1;
}


message GetAllowedAuthenticationCredentialsRequest {
  int32 auth_level = 1;
}

message AuthCredentialEntry {
  string username = 1;
  string password = 2;
  int32 auth_level = 3;
}

message GetAllowedAuthenticationCredentialsResponse {
  // Map where username is the key, value is
  map<string, AuthCredentialEntry> allowed_credentials = 1;
}

message GetAllLoadedOriginsRequest {
}

message GetAllLoadedOriginsResponse {
  // simply a list of origins with configurations loaded
  repeated string loaded_origins = 1;
}
